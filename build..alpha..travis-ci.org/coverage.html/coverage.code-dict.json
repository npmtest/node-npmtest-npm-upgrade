{"/home/travis/build/npmtest/node-npmtest-npm-upgrade/test.js":"/* istanbul instrument in package npmtest_npm_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/lib.npmtest_npm_upgrade.js":"/* istanbul instrument in package npmtest_npm_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_upgrade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_upgrade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-upgrade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_upgrade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_upgrade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_upgrade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_upgrade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_upgrade.__dirname + '/lib.npmtest_npm_upgrade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/bin/cli.js":"#! /usr/bin/env node\n'use strict';\n\nvar _yargs = require('yargs');\n\nvar _yargs2 = _interopRequireDefault(_yargs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_yargs2.default.commandDir('../commands').demandCommand().strict().version().help().argv;","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/commands/check.js":"'use strict';\n\nexports.__esModule = true;\nexports.handler = exports.describe = exports.aliases = exports.command = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nexports.builder = builder;\n\nvar _fs = require('fs');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _opener = require('opener');\n\nvar _opener2 = _interopRequireDefault(_opener);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _npmCheckUpdates = require('npm-check-updates');\n\nvar _npmCheckUpdates2 = _interopRequireDefault(_npmCheckUpdates);\n\nvar _versionUtil = require('npm-check-updates/lib/version-util');\n\nvar _catchAsyncError = require('../catchAsyncError');\n\nvar _catchAsyncError2 = _interopRequireDefault(_catchAsyncError);\n\nvar _npmProgress = require('../npmProgress');\n\nvar npmProgress = _interopRequireWildcard(_npmProgress);\n\nvar _filterUtils = require('../filterUtils');\n\nvar _packageUtils = require('../packageUtils');\n\nvar _changelogUtils = require('../changelogUtils');\n\nvar _repositoryUtils = require('../repositoryUtils');\n\nvar _cliTable = require('../cliTable');\n\nvar _cliStyles = require('../cliStyles');\n\nvar _askUser = require('../askUser');\n\nvar _askUser2 = _interopRequireDefault(_askUser);\n\nvar _ignore = require('./ignore');\n\nvar _Config = require('../Config');\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar pkg = require('../../package.json');\n\nvar CURRENT_REPOSITORY_ID = (0, _repositoryUtils.getRepositoryInfo)(pkg.repository.url).repositoryId;\nvar DEFAULT_REMOTE_CHANGELOGS_DB_URL = `https://raw.githubusercontent.com/${CURRENT_REPOSITORY_ID}/master/db/changelogUrls.json`;\n\nfunction createUpdatedModulesTable(modules) {\n  return (0, _cliTable.createSimpleTable)(_lodash2.default.map(modules, function (_ref) {\n    var name = _ref.name,\n        from = _ref.from,\n        to = _ref.to;\n    return [(0, _cliStyles.strong)(name), from, '→', (0, _versionUtil.colorizeDiff)(to, from)];\n  }));\n}\n\nvar command = exports.command = 'check [filter]';\nvar aliases = exports.aliases = '*';\nvar describe = exports.describe = 'Check for outdated modules';\n\nvar depsCliOptions = _packageUtils.DEPS_GROUPS.filter(function (group) {\n  return group.cliOption;\n});\n\nfunction builder(yargs) {\n  depsCliOptions.forEach(function (_ref2) {\n    var name = _ref2.name,\n        field = _ref2.field;\n    return yargs.option(name, {\n      type: 'boolean',\n      alias: name[0],\n      describe: `check only \"${field}\"`\n    });\n  });\n}\n\nvar handler = exports.handler = (0, _catchAsyncError2.default)(function () {\n  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(opts) {\n    var filter, filterModuleName, _loadPackageJson, packageFile, packageJson, depsGroupsToCheck, depsGroupsToCheckStr, filteredWith, currentVersions, latestVersions, upgradedVersions, config, _$map$partition$value, ignoredModules, modulesToUpdate, rows, packageUpdated, isUpdateFinished, outdatedModule, name, from, to, changelogUrl, homepage, answer, _ref8, versions, reason, shouldUpdatePackageFile;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filter = opts.filter;\n            // Making function that will filter out deps by module name\n\n            filterModuleName = (0, _filterUtils.makeFilterFunction)(filter);\n\n            // Checking all the deps if all of them are omitted\n\n            if (_lodash2.default.every(depsCliOptions, function (_ref4) {\n              var name = _ref4.name;\n              return opts[name] === false;\n            })) {\n              _lodash2.default.each(depsCliOptions, function (_ref5) {\n                var name = _ref5.name;\n                return opts[name] = true;\n              });\n            }\n\n            // Loading `package.json` from the current directory\n            _loadPackageJson = (0, _packageUtils.loadPackageJson)(), packageFile = _loadPackageJson.path, packageJson = _loadPackageJson.content;\n\n            // Fetching remote changelogs db in background\n\n            (0, _changelogUtils.fetchRemoteDb)(DEFAULT_REMOTE_CHANGELOGS_DB_URL);\n\n            depsGroupsToCheck = _lodash2.default.filter(depsCliOptions, function (_ref6) {\n              var name = _ref6.name;\n              return !!opts[name];\n            });\n            depsGroupsToCheckStr = depsGroupsToCheck.length === depsCliOptions.length ? '' : `${_lodash2.default.map(depsGroupsToCheck, 'name').join(' and ')} `;\n            filteredWith = filter ? `filtered with ${(0, _cliStyles.strong)(filter)} ` : '';\n\n\n            console.log(`Checking for outdated ${depsGroupsToCheckStr}dependencies ${filteredWith}for \"${(0, _cliStyles.strong)(packageFile)}\"...`);\n\n            _context.next = 11;\n            return _npmCheckUpdates2.default.initialize();\n\n          case 11:\n            currentVersions = _npmCheckUpdates2.default.getCurrentDependencies(packageJson, {\n              prod: opts.production,\n              dev: opts.development,\n              optional: opts.optional\n            });\n            _context.next = 14;\n            return _npmCheckUpdates2.default.getLatestVersions(currentVersions, { versionTarget: 'latest' });\n\n          case 14:\n            latestVersions = _context.sent;\n            upgradedVersions = _npmCheckUpdates2.default.upgradeDependencies(currentVersions, latestVersions);\n\n            npmProgress.disable();\n\n            // Filtering modules that have to be updated\n            upgradedVersions = _lodash2.default.pickBy(upgradedVersions, function (newVersion, moduleName) {\n              return filterModuleName(moduleName);\n            });\n\n            if (!_lodash2.default.isEmpty(upgradedVersions)) {\n              _context.next = 20;\n              break;\n            }\n\n            return _context.abrupt('return', console.log((0, _cliStyles.success)('All dependencies are up-to-date!')));\n\n          case 20:\n\n            // Getting the list of ignored modules\n            config = new _Config2.default();\n\n            config.ignore = config.ignore || {};\n\n            // Making arrays of outdated modules\n            _$map$partition$value = (0, _lodash2.default)(upgradedVersions).map(function (newVersion, moduleName) {\n              return {\n                name: moduleName,\n                from: currentVersions[moduleName],\n                to: newVersion\n              };\n            }).partition(function (module) {\n              return _lodash2.default.has(config.ignore, module.name) && _semver2.default.satisfies(latestVersions[module.name], config.ignore[module.name].versions);\n            }).valueOf(), ignoredModules = _$map$partition$value[0], modulesToUpdate = _$map$partition$value[1];\n\n            // Creating pretty-printed CLI tables with update info\n\n            if (_lodash2.default.isEmpty(modulesToUpdate)) {\n              console.log((0, _cliStyles.success)('\\nAll active modules are up-to-date!'));\n            } else {\n              console.log(`\\n${(0, _cliStyles.strong)('New versions of active modules available:')}\\n\\n${createUpdatedModulesTable(modulesToUpdate)}`);\n            }\n\n            if (!_lodash2.default.isEmpty(ignoredModules)) {\n              rows = _lodash2.default.map(ignoredModules, function (_ref7) {\n                var name = _ref7.name,\n                    from = _ref7.from,\n                    to = _ref7.to;\n                return [(0, _cliStyles.strong)(name), from, '→', (0, _versionUtil.colorizeDiff)(to, from), (0, _cliStyles.attention)(config.ignore[name].versions), config.ignore[name].reason];\n              });\n\n              // Adding table header\n\n              rows.unshift(_lodash2.default.map(['', 'From', '', 'To', 'Ignored versions', 'Reason'], function (header) {\n                return (0, _cliStyles.strong)(header);\n              }));\n\n              console.log(`\\n${(0, _cliStyles.strong)('Ignored updates:')}\\n\\n${(0, _cliTable.createSimpleTable)(rows)}`);\n            }\n\n            packageUpdated = false;\n            isUpdateFinished = false;\n\n          case 27:\n            if (!(modulesToUpdate.length && !isUpdateFinished)) {\n              _context.next = 71;\n              break;\n            }\n\n            outdatedModule = modulesToUpdate.shift();\n            name = outdatedModule.name, from = outdatedModule.from, to = outdatedModule.to;\n            changelogUrl = outdatedModule.changelogUrl, homepage = outdatedModule.homepage;\n\n            // Adds new line\n\n            console.log('');\n\n            _context.next = 34;\n            return (0, _askUser2.default)({\n              type: 'list',\n              message: `${changelogUrl === undefined ? 'U' : 'So, u'}pdate \"${name}\" in package.json ` + `from ${from} to ${(0, _versionUtil.colorizeDiff)(to, from)}?`,\n              choices: _lodash2.default.compact([{ name: 'Yes', value: true }, { name: 'No', value: false },\n              // Don't show this option if we couldn't find module's changelog url\n              changelogUrl !== null && { name: 'Show changelog', value: 'changelog' },\n              // Show this if we haven't found changelog\n              changelogUrl === null && homepage !== null && { name: 'Open homepage', value: 'homepage' }, { name: 'Ignore', value: 'ignore' }, { name: 'Finish update process', value: 'finish' }]),\n              // Automatically setting cursor to \"Open homepage\" after we haven't found changelog\n              default: changelogUrl === null && homepage === undefined ? 2 : 0\n            });\n\n          case 34:\n            answer = _context.sent;\n            _context.t0 = answer;\n            _context.next = _context.t0 === 'changelog' ? 38 : _context.t0 === 'homepage' ? 46 : _context.t0 === 'ignore' ? 56 : _context.t0 === 'finish' ? 63 : _context.t0 === true ? 65 : 69;\n            break;\n\n          case 38:\n            // Ask user about this module again\n            modulesToUpdate.unshift(outdatedModule);\n\n            if (!(changelogUrl === undefined)) {\n              _context.next = 44;\n              break;\n            }\n\n            console.log('Trying to find changelog URL...');\n            _context.next = 43;\n            return (0, _changelogUtils.findModuleChangelogUrl)(name, DEFAULT_REMOTE_CHANGELOGS_DB_URL);\n\n          case 43:\n            changelogUrl = outdatedModule.changelogUrl = _context.sent;\n\n          case 44:\n\n            if (changelogUrl) {\n              console.log(`Opening ${(0, _cliStyles.strong)(changelogUrl)}...`);\n              (0, _opener2.default)(changelogUrl);\n            } else {\n              console.log(`Sorry, we haven't found any changelog URL for ${(0, _cliStyles.strong)(name)} module.\\n` + `It would be great if you could fill an issue about this here: ${(0, _cliStyles.strong)(pkg.bugs.url)}\\n` + 'Thanks a lot!');\n            }\n            return _context.abrupt('break', 69);\n\n          case 46:\n            // Ask user about this module again\n            modulesToUpdate.unshift(outdatedModule);\n\n            if (!(homepage === undefined)) {\n              _context.next = 54;\n              break;\n            }\n\n            console.log('Trying to find homepage URL...');\n            _context.t1 = _packageUtils.getModuleHomepage;\n            _context.next = 52;\n            return (0, _packageUtils.getModuleInfo)(name);\n\n          case 52:\n            _context.t2 = _context.sent;\n            homepage = outdatedModule.homepage = (0, _context.t1)(_context.t2);\n\n          case 54:\n\n            if (homepage) {\n              console.log(`Opening ${(0, _cliStyles.strong)(homepage)}...`);\n              (0, _opener2.default)(homepage);\n            } else {\n              console.log(`Sorry, there is no info about homepage URL in the ${(0, _cliStyles.strong)(name)}'s package.json`);\n            }\n            return _context.abrupt('break', 69);\n\n          case 56:\n            _context.next = 58;\n            return (0, _ignore.askIgnoreFields)(latestVersions[name]);\n\n          case 58:\n            _ref8 = _context.sent;\n            versions = _ref8.versions;\n            reason = _ref8.reason;\n\n            config.ignore[name] = { versions, reason };\n            return _context.abrupt('break', 69);\n\n          case 63:\n            isUpdateFinished = true;\n            return _context.abrupt('break', 69);\n\n          case 65:\n            packageUpdated = true;\n            (0, _packageUtils.setModuleVersion)(name, to, packageJson);\n            delete config.ignore[name];\n            return _context.abrupt('break', 69);\n\n          case 69:\n            _context.next = 27;\n            break;\n\n          case 71:\n\n            // Adds new line\n            console.log('');\n\n            // Saving config\n            config.save();\n\n            if (packageUpdated) {\n              _context.next = 76;\n              break;\n            }\n\n            console.log('Nothing to update');\n            return _context.abrupt('return');\n\n          case 76:\n\n            packageJson = (0, _stringify2.default)(packageJson, null, 2);\n            console.log(`New package.json:\\n\\n${packageJson}\\n`);\n            _context.next = 80;\n            return (0, _askUser2.default)({ type: 'confirm', message: 'Update package.json?', default: true });\n\n          case 80:\n            shouldUpdatePackageFile = _context.sent;\n\n\n            if (shouldUpdatePackageFile) {\n              // Adding newline to the end of file\n              (0, _fs.writeFileSync)(packageFile, `${packageJson}\\n`);\n            }\n\n          case 82:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}());","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/askUser.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(question) {\n    var _ref2, answer;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _inquirer2.default.prompt([(0, _extends3.default)({}, question, { name: 'answer' })]);\n\n          case 2:\n            _ref2 = _context.sent;\n            answer = _ref2.answer;\n            return _context.abrupt('return', answer);\n\n          case 5:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function askUser(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return askUser;\n}();","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/catchAsyncError.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = catchAsyncError;\nfunction catchAsyncError(asyncFn) {\n  return function () {\n    return asyncFn.apply(this, arguments).catch(function (err) {\n      console.error(err);\n      process.exit(1);\n    });\n  };\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/changelogUtils.js":"'use strict';\n\nexports.__esModule = true;\nexports.findModuleChangelogUrl = exports.fetchRemoteDb = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar findModuleChangelogUrl = exports.findModuleChangelogUrl = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(moduleName, remoteChangelogUrlsDbUrl) {\n    var changelogUrls, _ref3, changelog, repository, _ref4, fileUrlBuilder, releasesPageUrl, possibleChangelogUrls;\n\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            changelogUrls = void 0;\n\n            if (!remoteChangelogUrlsDbUrl) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 4;\n            return fetchRemoteDb(remoteChangelogUrlsDbUrl);\n\n          case 4:\n            changelogUrls = _context2.sent;\n\n          case 5:\n\n            changelogUrls = changelogUrls || require('../db/changelogUrls.json');\n\n            if (!changelogUrls[moduleName]) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt('return', changelogUrls[moduleName]);\n\n          case 8:\n            _context2.next = 10;\n            return (0, _packageUtils.getModuleInfo)(moduleName);\n\n          case 10:\n            _ref3 = _context2.sent;\n            changelog = _ref3.changelog;\n            repository = _ref3.repository;\n\n            if (!changelog) {\n              _context2.next = 15;\n              break;\n            }\n\n            return _context2.abrupt('return', changelog);\n\n          case 15:\n            if (!(repository && repository.url)) {\n              _context2.next = 38;\n              break;\n            }\n\n            // If repository is located on one of known hostings, then we will try to request\n            // some common changelog files from there or return URL for \"Releases\" page\n            _ref4 = (0, _repositoryUtils.getRepositoryInfo)(repository.url) || {}, fileUrlBuilder = _ref4.fileUrlBuilder, releasesPageUrl = _ref4.releasesPageUrl;\n\n            if (!fileUrlBuilder) {\n              _context2.next = 29;\n              break;\n            }\n\n            possibleChangelogUrls = _lodash2.default.map(COMMON_CHANGELOG_FILES, fileUrlBuilder);\n            _context2.prev = 19;\n            _context2.next = 22;\n            return _bluebird2.default.any(_lodash2.default.map(possibleChangelogUrls, function (url) {\n              return _bluebird2.default.try(function () {\n                return (0, _got2.default)(url);\n              }).return(url);\n            }));\n\n          case 22:\n            return _context2.abrupt('return', _context2.sent);\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2['catch'](19);\n\n            if (_context2.t0 instanceof _bluebird2.default.AggregateError) {\n              _context2.next = 29;\n              break;\n            }\n\n            throw _context2.t0;\n\n          case 29:\n            if (!releasesPageUrl) {\n              _context2.next = 38;\n              break;\n            }\n\n            _context2.prev = 30;\n            _context2.next = 33;\n            return (0, _got2.default)(releasesPageUrl);\n\n          case 33:\n            return _context2.abrupt('return', releasesPageUrl);\n\n          case 36:\n            _context2.prev = 36;\n            _context2.t1 = _context2['catch'](30);\n\n          case 38:\n            return _context2.abrupt('return', null);\n\n          case 39:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[19, 25], [30, 36]]);\n  }));\n\n  return function findModuleChangelogUrl(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _got = require('got');\n\nvar _got2 = _interopRequireDefault(_got);\n\nvar _packageUtils = require('./packageUtils');\n\nvar _repositoryUtils = require('./repositoryUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar COMMON_CHANGELOG_FILES = ['CHANGELOG.md', 'History.md', 'CHANGES.md', 'CHANGELOG'];\n\nvar fetchRemoteDb = exports.fetchRemoteDb = _lodash2.default.memoize(function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {\n    var response;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (0, _got2.default)(url, { json: true });\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt('return', response.body);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context['catch'](0);\n            return _context.abrupt('return', null);\n\n          case 10:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined, [[0, 7]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/packageUtils.js":"'use strict';\n\nexports.__esModule = true;\nexports.getModuleInfo = exports.DEPS_GROUPS = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.loadPackageJson = loadPackageJson;\nexports.findModuleDepsGroup = findModuleDepsGroup;\nexports.getModuleVersion = getModuleVersion;\nexports.setModuleVersion = setModuleVersion;\nexports.getModuleHomepage = getModuleHomepage;\n\nvar _path = require('path');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _npm = require('npm');\n\nvar _npm2 = _interopRequireDefault(_npm);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEPS_GROUPS = exports.DEPS_GROUPS = [{ name: 'production', field: 'dependencies', cliOption: true }, { name: 'optional', field: 'optionalDependencies', cliOption: true }, { name: 'development', field: 'devDependencies', cliOption: true }, { name: 'peer', field: 'peerDependencies', cliOption: false }];\n\nfunction loadPackageJson() {\n  var packageFile = (0, _path.resolve)('./package.json');\n  var packageJson = void 0;\n\n  try {\n    packageJson = require(packageFile);\n  } catch (err) {\n    console.error(`Error loading package.json: ${err.message}`);\n    process.exit(1);\n  }\n\n  return { path: packageFile, content: packageJson };\n}\n\nfunction findModuleDepsGroup(moduleName, packageJson) {\n  for (var _iterator = _lodash2.default.map(DEPS_GROUPS, 'field'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var group = _ref;\n\n    var modules = packageJson[group];\n\n    if (modules && modules[moduleName]) {\n      return modules;\n    }\n  }\n\n  return null;\n}\n\nfunction getModuleVersion(moduleName, packageJson) {\n  var depsGroup = findModuleDepsGroup(moduleName, packageJson);\n\n  return depsGroup ? depsGroup[moduleName] : null;\n}\n\nfunction setModuleVersion(moduleName, newVersion, packageJson) {\n  var depsGroup = findModuleDepsGroup(moduleName, packageJson);\n\n  if (depsGroup) {\n    depsGroup[moduleName] = newVersion;\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction getModuleHomepage(packageJson) {\n  return packageJson.homepage || packageJson.url || null;\n}\n\nvar getModuleInfo = exports.getModuleInfo = _lodash2.default.memoize(function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(moduleName) {\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return new _promise2.default(function (resolve, reject) {\n              try {\n                // This function is only supposed to run after `npm-check-updates`, so we don't need to call `npm.load()` here\n                _npm2.default.commands.view([moduleName], true, function (err, moduleInfo) {\n                  if (err) {\n                    reject(err);\n                  } else {\n                    // `moduleInfo` contains object `{ <version>: <info> }`, so we should extract info from there\n                    resolve(_lodash2.default.values(moduleInfo)[0]);\n                  }\n                });\n              } catch (err) {\n                reject(err);\n              }\n            });\n\n          case 2:\n            return _context.abrupt('return', _context.sent);\n\n          case 3:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/cliStyles.js":"'use strict';\n\nexports.__esModule = true;\nexports.attention = exports.success = exports.strong = undefined;\n\nvar _chalk = require('chalk');\n\nvar strong = exports.strong = _chalk.white.bold;\nvar success = exports.success = _chalk.green.bold;\nvar attention = exports.attention = _chalk.yellow.bold;","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/cliTable.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nexports.createSimpleTable = createSimpleTable;\n\nvar _cliTable = require('cli-table');\n\nvar _cliTable2 = _interopRequireDefault(_cliTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar COL_ALIGNS_MAP = {\n  l: 'left',\n  r: 'right',\n  c: 'middle'\n};\n\nfunction createSimpleTable(rows) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (opts.colAligns) {\n    opts.colAligns = opts.colAligns.split('').map(function (val) {\n      return COL_ALIGNS_MAP[val];\n    });\n  }\n\n  var table = new _cliTable2.default((0, _extends3.default)({\n    style: { 'padding-left': 2 },\n    colAligns: ['left', 'right', 'right', 'right', 'middle'],\n    chars: {\n      'top': '',\n      'top-mid': '',\n      'top-left': '',\n      'top-right': '',\n      'bottom': '',\n      'bottom-mid': '',\n      'bottom-left': '',\n      'bottom-right': '',\n      'left': '',\n      'left-mid': '',\n      'mid': '',\n      'mid-mid': '',\n      'right': '',\n      'right-mid': '',\n      'middle': ''\n    }\n  }, opts));\n\n  if (rows) {\n    table.push.apply(table, rows);\n  }\n\n  return table;\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/Config.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _symbol = require('babel-runtime/core-js/symbol');\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _path = require('path');\n\nvar _fs = require('fs');\n\nvar _del = require('del');\n\nvar _del2 = _interopRequireDefault(_del);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PROJECT_CONFIG_FILENAME = '.npm-upgrade.json';\n\nvar path = (0, _symbol2.default)('path');\nvar storedData = (0, _symbol2.default)('storedData');\nvar read = (0, _symbol2.default)('read');\nvar getData = (0, _symbol2.default)('getData');\n\nvar Config = function () {\n  function Config(opts) {\n    (0, _classCallCheck3.default)(this, Config);\n\n    var _ref = opts || {},\n        projectRoot = _ref.projectRoot;\n\n    this[path] = (0, _path.resolve)(projectRoot || process.cwd(), PROJECT_CONFIG_FILENAME);\n    this[storedData] = this[read]();\n    _lodash2.default.assign(this, _lodash2.default.cloneDeep(this[storedData]));\n  }\n\n  Config.prototype.save = function save() {\n    var data = this[getData]();\n\n    if (_lodash2.default.isEqual(data, this[storedData])) return;\n\n    try {\n      if (_lodash2.default.isEmpty(data)) {\n        this.remove();\n      } else {\n        (0, _fs.writeFileSync)(this[path], (0, _stringify2.default)(data, null, 2));\n      }\n    } catch (err) {\n      err.message = `Unable to update npm-upgrade config file: ${err.message}`;\n      throw err;\n    }\n  };\n\n  Config.prototype.remove = function remove() {\n    return _del2.default.sync(this[path]);\n  };\n\n  Config.prototype[read] = function () {\n    try {\n      return require(this[path]);\n    } catch (err) {\n      return {};\n    }\n  };\n\n  Config.prototype[getData] = function () {\n    var data = (0, _extends3.default)({}, this);\n    return cleanDeep(data);\n  };\n\n  return Config;\n}();\n\nexports.default = Config;\n\n\nfunction cleanDeep(obj) {\n  _lodash2.default.each(obj, function (val, key) {\n    if (_lodash2.default.isObjectLike(val)) {\n      cleanDeep(val);\n      if (_lodash2.default.isEmpty(val)) {\n        delete obj[key];\n      }\n    } else if (val === null || val === undefined) {\n      delete obj[key];\n    }\n  });\n\n  return obj;\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/filterUtils.js":"'use strict';\n\nexports.__esModule = true;\nexports.globToRegexp = globToRegexp;\nexports.makeFilterFunction = makeFilterFunction;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction globToRegexp(glob, flags) {\n  var regexp = glob.split(/\\*+/).map(_lodash2.default.escapeRegExp).join('.*?');\n\n  return new RegExp(`^${regexp}$`, flags);\n}\n\nfunction makeFilterFunction() {\n  var filterStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var _$split$compact$parti = (0, _lodash2.default)(filterStr).split(/\\s+/).compact().partition(function (filter) {\n    return filter[0] === '!';\n  }).valueOf(),\n      excludeFilters = _$split$compact$parti[0],\n      includeFilters = _$split$compact$parti[1];\n\n  if (!includeFilters.length) {\n    includeFilters.push('*');\n  }\n\n  includeFilters = (0, _lodash2.default)(includeFilters).map(function (filter) {\n    return globToRegexp(filter, 'i');\n  }).map(function (filterRegexp) {\n    return function (str) {\n      return filterRegexp.test(str);\n    };\n  });\n\n  excludeFilters = (0, _lodash2.default)(excludeFilters).map(function (filter) {\n    return globToRegexp(filter.slice(1), 'i');\n  }).map(function (filterRegexp) {\n    return function (str) {\n      return filterRegexp.test(str);\n    };\n  });\n\n  return function (str) {\n    return excludeFilters.every(function (filter) {\n      return !filter(str);\n    }) && includeFilters.some(function (filter) {\n      return filter(str);\n    });\n  };\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/npmProgress.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _noProgressWhileRunning = require('npm/lib/utils/no-progress-while-running');\n\nObject.defineProperty(exports, 'disable', {\n  enumerable: true,\n  get: function get() {\n    return _noProgressWhileRunning.startRunning;\n  }\n});\nObject.defineProperty(exports, 'enable', {\n  enumerable: true,\n  get: function get() {\n    return _noProgressWhileRunning.stopRunning;\n  }\n});","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/repositoryUtils.js":"'use strict';\n\nexports.__esModule = true;\nexports.getRepositoryInfo = getRepositoryInfo;\n\nvar _url = require('url');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar KNOWN_REPOSITORIES = {\n  'github.com': function githubCom(parsedRepositoryUrl) {\n    var repositoryId = /^(.+?\\/.+?)(?:\\/|\\.git$|$)/.exec(parsedRepositoryUrl.pathname.slice(1))[1];\n    var rootUrl = `https://github.com/${repositoryId}`;\n\n    return {\n      repositoryId,\n      fileUrlBuilder: function fileUrlBuilder(filename) {\n        return `${rootUrl}/blob/master/${filename}`;\n      },\n      releasesPageUrl: `${rootUrl}/releases`\n    };\n  }\n};\n\nfunction getRepositoryInfo(repositoryUrl) {\n  var parsedUrl = (0, _url.parse)(repositoryUrl);\n  var hostname = parsedUrl.hostname;\n\n\n  return _lodash2.default.has(KNOWN_REPOSITORIES, hostname) ? KNOWN_REPOSITORIES[hostname](parsedUrl) : null;\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/changelogUtils.js":"import Bluebird from 'bluebird';\nimport _ from 'lodash';\nimport got from 'got';\n\nimport { getModuleInfo } from './packageUtils';\nimport { getRepositoryInfo } from './repositoryUtils';\n\nconst COMMON_CHANGELOG_FILES = ['CHANGELOG.md', 'History.md', 'CHANGES.md', 'CHANGELOG'];\n\nexport const fetchRemoteDb = _.memoize(async url => {\n  try {\n    const response = await got(url, { json: true });\n\n    return response.body;\n  } catch (err) {\n    return null;\n  }\n});\n\nexport async function findModuleChangelogUrl(moduleName, remoteChangelogUrlsDbUrl) {\n  let changelogUrls;\n\n  if (remoteChangelogUrlsDbUrl) {\n    changelogUrls = await fetchRemoteDb(remoteChangelogUrlsDbUrl);\n  }\n\n  changelogUrls = changelogUrls || require('../db/changelogUrls.json');\n\n  if (changelogUrls[moduleName]) {\n    return changelogUrls[moduleName];\n  }\n\n  const { changelog, repository } = await getModuleInfo(moduleName);\n\n  if (changelog) {\n    return changelog;\n  }\n\n  if (repository && repository.url) {\n    // If repository is located on one of known hostings, then we will try to request\n    // some common changelog files from there or return URL for \"Releases\" page\n    const { fileUrlBuilder, releasesPageUrl } = getRepositoryInfo(repository.url) || {};\n\n    if (fileUrlBuilder) {\n      const possibleChangelogUrls = _.map(COMMON_CHANGELOG_FILES, fileUrlBuilder);\n\n      try {\n        return await Bluebird.any(\n          _.map(possibleChangelogUrls, url =>\n            Bluebird\n              .try(() => got(url))\n              .return(url)\n          )\n        );\n      } catch (err) {\n        if (!(err instanceof Bluebird.AggregateError)) throw err;\n      }\n    }\n\n    if (releasesPageUrl) {\n      try {\n        // Checking `releasesUrl`...\n        await got(releasesPageUrl);\n        // `releasesUrl` is fine\n        return releasesPageUrl;\n      } catch (err) {\n        // `releasesPageUrl` is broken\n      }\n    }\n  }\n\n  return null;\n}\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/npmProgress.js":"export { startRunning as disable, stopRunning as enable } from 'npm/lib/utils/no-progress-while-running';\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/packageUtils.js":"import { resolve } from 'path';\n\nimport _ from 'lodash';\nimport npm from 'npm';\n\nexport const DEPS_GROUPS = [\n  { name: 'production', field: 'dependencies', cliOption: true },\n  { name: 'optional', field: 'optionalDependencies', cliOption: true },\n  { name: 'development', field: 'devDependencies', cliOption: true },\n  { name: 'peer', field: 'peerDependencies', cliOption: false }\n];\n\nexport function loadPackageJson() {\n  const packageFile = resolve('./package.json');\n  let packageJson;\n\n  try {\n    packageJson = require(packageFile);\n  } catch (err) {\n    console.error(`Error loading package.json: ${err.message}`);\n    process.exit(1);\n  }\n\n  return { path: packageFile, content: packageJson };\n}\n\nexport function findModuleDepsGroup(moduleName, packageJson) {\n  for (const group of _.map(DEPS_GROUPS, 'field')) {\n    const modules = packageJson[group];\n\n    if (modules && modules[moduleName]) {\n      return modules;\n    }\n  }\n\n  return null;\n}\n\nexport function getModuleVersion(moduleName, packageJson) {\n  const depsGroup = findModuleDepsGroup(moduleName, packageJson);\n\n  return depsGroup ? depsGroup[moduleName] : null;\n}\n\nexport function setModuleVersion(moduleName, newVersion, packageJson) {\n  const depsGroup = findModuleDepsGroup(moduleName, packageJson);\n\n  if (depsGroup) {\n    depsGroup[moduleName] = newVersion;\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function getModuleHomepage(packageJson) {\n  return packageJson.homepage || packageJson.url || null;\n}\n\nexport const getModuleInfo = _.memoize(async moduleName =>\n  await new Promise((resolve, reject) => {\n    try {\n      // This function is only supposed to run after `npm-check-updates`, so we don't need to call `npm.load()` here\n      npm.commands.view([moduleName], true, (err, moduleInfo) => {\n        if (err) {\n          reject(err);\n        } else {\n          // `moduleInfo` contains object `{ <version>: <info> }`, so we should extract info from there\n          resolve(_.values(moduleInfo)[0]);\n        }\n      });\n    } catch (err) {\n      reject(err);\n    }\n  })\n);\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/commands/ignore.js":"'use strict';\n\nexports.__esModule = true;\nexports.askIgnoreFields = exports.handler = exports.builder = exports.describe = exports.command = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar askIgnoreFields = exports.askIgnoreFields = function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(defaultVersions) {\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _askUser2.default)({\n              message: 'Input version or version range to ignore',\n              default: defaultVersions,\n              validate: function validate(input) {\n                return _semver2.default.validRange(input) ? true : 'Input valid semver version range';\n              }\n            });\n\n          case 2:\n            _context.t0 = _context.sent;\n            _context.next = 5;\n            return (0, _askUser2.default)({ message: 'Ignore reason' });\n\n          case 5:\n            _context.t1 = _context.sent;\n            return _context.abrupt('return', {\n              versions: _context.t0,\n              reason: _context.t1\n            });\n\n          case 7:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function askIgnoreFields(_x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.createIgnoredModulesTable = createIgnoredModulesTable;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _askUser = require('../askUser');\n\nvar _askUser2 = _interopRequireDefault(_askUser);\n\nvar _cliTable = require('../cliTable');\n\nvar _cliStyles = require('../cliStyles');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar command = exports.command = 'ignore <command>';\nvar describe = exports.describe = 'Manage ignored modules';\nvar builder = exports.builder = function builder(yargs) {\n  return yargs.commandDir('ignore').demandCommand(1, 'Provide valid command');\n};\nvar handler = exports.handler = function handler(opts) {\n  console.log(opts);\n};\n\nfunction createIgnoredModulesTable(ignoredModulesConfig) {\n  var moduleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _lodash2.default.keys(ignoredModulesConfig);\n\n  var rows = moduleNames.map(function (moduleName) {\n    return [(0, _cliStyles.strong)(moduleName), (0, _cliStyles.attention)(ignoredModulesConfig[moduleName].versions), ignoredModulesConfig[moduleName].reason];\n  });\n\n  // Table header\n  rows.unshift(['', 'Ignored versions', 'Reason'].map(function (header) {\n    return (0, _cliStyles.strong)(header);\n  }));\n\n  return (0, _cliTable.createSimpleTable)(rows, { colAligns: 'lcl' });\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/bin/cli.js":"#! /usr/bin/env node\n\nimport yargs from 'yargs';\n\nyargs\n  .commandDir('../commands')\n  .demandCommand()\n  .strict()\n  .version()\n  .help()\n  .argv;\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/commands/check.js":"import { writeFileSync } from 'fs';\n\nimport _ from 'lodash';\nimport opener from 'opener';\nimport semver from 'semver';\nimport ncu from 'npm-check-updates';\nimport { colorizeDiff } from 'npm-check-updates/lib/version-util';\n\nimport catchAsyncError from '../catchAsyncError';\nimport * as npmProgress from '../npmProgress';\nimport { makeFilterFunction } from '../filterUtils';\nimport { DEPS_GROUPS, loadPackageJson, setModuleVersion, getModuleInfo, getModuleHomepage } from '../packageUtils';\nimport { fetchRemoteDb, findModuleChangelogUrl } from '../changelogUtils';\nimport { getRepositoryInfo } from '../repositoryUtils';\nimport { createSimpleTable } from '../cliTable';\nimport { strong, success, attention } from '../cliStyles';\nimport askUser from '../askUser';\nimport { askIgnoreFields } from './ignore';\nimport Config from '../Config';\n\nconst pkg = require('../../package.json');\n\nconst CURRENT_REPOSITORY_ID = getRepositoryInfo(pkg.repository.url).repositoryId;\nconst DEFAULT_REMOTE_CHANGELOGS_DB_URL =\n  `https://raw.githubusercontent.com/${CURRENT_REPOSITORY_ID}/master/db/changelogUrls.json`;\n\nfunction createUpdatedModulesTable(modules) {\n  return createSimpleTable(\n    _.map(modules, ({ name, from, to }) => [\n      strong(name),\n      from, '→', colorizeDiff(to, from)\n    ])\n  );\n}\n\nexport const command = 'check [filter]';\nexport const aliases = '*';\nexport const describe = 'Check for outdated modules';\n\nconst depsCliOptions = DEPS_GROUPS.filter(group => group.cliOption);\n\nexport function builder(yargs) {\n  depsCliOptions\n    .forEach(({ name, field }) =>\n      yargs.option(name, {\n        type: 'boolean',\n        alias: name[0],\n        describe: `check only \"${field}\"`\n      })\n    );\n}\n\nexport const handler = catchAsyncError(async opts => {\n  const { filter } = opts;\n  // Making function that will filter out deps by module name\n  const filterModuleName = makeFilterFunction(filter);\n\n  // Checking all the deps if all of them are omitted\n  if (_.every(depsCliOptions, ({ name }) => opts[name] === false)) {\n    _.each(depsCliOptions, ({ name }) => (opts[name] = true));\n  }\n\n  // Loading `package.json` from the current directory\n  let { path: packageFile, content: packageJson } = loadPackageJson();\n\n  // Fetching remote changelogs db in background\n  fetchRemoteDb(DEFAULT_REMOTE_CHANGELOGS_DB_URL);\n\n  const depsGroupsToCheck = _.filter(depsCliOptions, ({ name }) => !!opts[name]);\n  const depsGroupsToCheckStr = (depsGroupsToCheck.length === depsCliOptions.length) ?\n    '' : `${_.map(depsGroupsToCheck, 'name').join(' and ')} `;\n  const filteredWith = filter ? `filtered with ${strong(filter)} ` : '';\n\n  console.log(\n    `Checking for outdated ${depsGroupsToCheckStr}dependencies ${filteredWith}for \"${strong(packageFile)}\"...`\n  );\n\n  await ncu.initialize();\n  const currentVersions = ncu.getCurrentDependencies(packageJson, {\n    prod: opts.production,\n    dev: opts.development,\n    optional: opts.optional\n  });\n\n  const latestVersions = await ncu.getLatestVersions(currentVersions, { versionTarget: 'latest' });\n  let upgradedVersions = ncu.upgradeDependencies(currentVersions, latestVersions);\n  npmProgress.disable();\n\n  // Filtering modules that have to be updated\n  upgradedVersions = _.pickBy(\n    upgradedVersions,\n    (newVersion, moduleName) => filterModuleName(moduleName)\n  );\n\n  if (_.isEmpty(upgradedVersions)) {\n    return console.log(success('All dependencies are up-to-date!'));\n  }\n\n  // Getting the list of ignored modules\n  const config = new Config();\n  config.ignore = config.ignore || {};\n\n  // Making arrays of outdated modules\n  const [ignoredModules, modulesToUpdate] = _(upgradedVersions)\n    .map((newVersion, moduleName) => ({\n      name: moduleName,\n      from: currentVersions[moduleName],\n      to: newVersion\n    }))\n    .partition(module => (\n      _.has(config.ignore, module.name) &&\n      semver.satisfies(latestVersions[module.name], config.ignore[module.name].versions)\n    ))\n    .valueOf();\n\n  // Creating pretty-printed CLI tables with update info\n  if (_.isEmpty(modulesToUpdate)) {\n    console.log(\n      success('\\nAll active modules are up-to-date!')\n    );\n  } else {\n    console.log(\n      `\\n${strong('New versions of active modules available:')}\\n\\n${createUpdatedModulesTable(modulesToUpdate)}`\n    );\n  }\n\n  if (!_.isEmpty(ignoredModules)) {\n    const rows = _.map(ignoredModules, ({ name, from, to }) => [\n      strong(name),\n      from, '→', colorizeDiff(to, from),\n      attention(config.ignore[name].versions),\n      config.ignore[name].reason\n    ]);\n\n    // Adding table header\n    rows.unshift(_.map(\n      ['', 'From', '', 'To', 'Ignored versions', 'Reason'],\n      header => strong(header)\n    ));\n\n    console.log(`\\n${strong('Ignored updates:')}\\n\\n${createSimpleTable(rows)}`);\n  }\n\n  let packageUpdated = false;\n  let isUpdateFinished = false;\n  while (modulesToUpdate.length && !isUpdateFinished) {\n    const outdatedModule = modulesToUpdate.shift();\n    const { name, from, to } = outdatedModule;\n    let { changelogUrl, homepage } = outdatedModule;\n\n    // Adds new line\n    console.log('');\n\n    const answer = await askUser({\n      type: 'list',\n      message: `${changelogUrl === undefined ? 'U' : 'So, u'}pdate \"${name}\" in package.json ` +\n      `from ${from} to ${colorizeDiff(to, from)}?`,\n      choices: _.compact([\n        { name: 'Yes', value: true },\n        { name: 'No', value: false },\n        // Don't show this option if we couldn't find module's changelog url\n        (changelogUrl !== null) &&\n        { name: 'Show changelog', value: 'changelog' },\n        // Show this if we haven't found changelog\n        (changelogUrl === null && homepage !== null) &&\n        { name: 'Open homepage', value: 'homepage' },\n        { name: 'Ignore', value: 'ignore' },\n        { name: 'Finish update process', value: 'finish' }\n      ]),\n      // Automatically setting cursor to \"Open homepage\" after we haven't found changelog\n      default: (changelogUrl === null && homepage === undefined) ? 2 : 0\n    });\n\n    switch (answer) {\n      case 'changelog':\n        // Ask user about this module again\n        modulesToUpdate.unshift(outdatedModule);\n\n        if (changelogUrl === undefined) {\n          console.log('Trying to find changelog URL...');\n          changelogUrl =\n            outdatedModule.changelogUrl = await findModuleChangelogUrl(name, DEFAULT_REMOTE_CHANGELOGS_DB_URL);\n        }\n\n        if (changelogUrl) {\n          console.log(`Opening ${strong(changelogUrl)}...`);\n          opener(changelogUrl);\n        } else {\n          console.log(\n            `Sorry, we haven't found any changelog URL for ${strong(name)} module.\\n` +\n            `It would be great if you could fill an issue about this here: ${strong(pkg.bugs.url)}\\n` +\n            'Thanks a lot!'\n          );\n        }\n        break;\n\n      case 'homepage':\n        // Ask user about this module again\n        modulesToUpdate.unshift(outdatedModule);\n\n        if (homepage === undefined) {\n          console.log('Trying to find homepage URL...');\n          homepage = outdatedModule.homepage = getModuleHomepage(await getModuleInfo(name));\n        }\n\n        if (homepage) {\n          console.log(`Opening ${strong(homepage)}...`);\n          opener(homepage);\n        } else {\n          console.log(`Sorry, there is no info about homepage URL in the ${strong(name)}'s package.json`);\n        }\n        break;\n\n      case 'ignore': {\n        const { versions, reason } = await askIgnoreFields(latestVersions[name]);\n        config.ignore[name] = { versions, reason };\n        break;\n      }\n\n      case 'finish':\n        isUpdateFinished = true;\n        break;\n\n      case true:\n        packageUpdated = true;\n        setModuleVersion(name, to, packageJson);\n        delete config.ignore[name];\n        break;\n    }\n\n  }\n\n  // Adds new line\n  console.log('');\n\n  // Saving config\n  config.save();\n\n  if (!packageUpdated) {\n    console.log('Nothing to update');\n    return;\n  }\n\n  packageJson = JSON.stringify(packageJson, null, 2);\n  console.log(`New package.json:\\n\\n${packageJson}\\n`);\n  const shouldUpdatePackageFile = await askUser(\n    { type: 'confirm', message: 'Update package.json?', default: true }\n  );\n\n  if (shouldUpdatePackageFile) {\n    // Adding newline to the end of file\n    writeFileSync(packageFile, `${packageJson}\\n`);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/commands/ignore/add.js":"'use strict';\n\nexports.__esModule = true;\nexports.handler = exports.describe = exports.command = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _inquirer = require('inquirer');\n\nvar _catchAsyncError = require('../../catchAsyncError');\n\nvar _catchAsyncError2 = _interopRequireDefault(_catchAsyncError);\n\nvar _askUser = require('../../askUser');\n\nvar _askUser2 = _interopRequireDefault(_askUser);\n\nvar _cliStyles = require('../../cliStyles');\n\nvar _ignore = require('../ignore');\n\nvar _Config = require('../../Config');\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _packageUtils = require('../../packageUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar command = exports.command = 'add [module]';\nvar describe = exports.describe = 'Add module to ignored list';\n\nvar handler = exports.handler = (0, _catchAsyncError2.default)(function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(opts) {\n    var moduleName, config, ignoreMore;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            moduleName = opts.module;\n            config = new _Config2.default();\n\n            config.ignore = config.ignore || {};\n\n            console.log(`Currently ignored modules:\\n\\n${(0, _ignore.createIgnoredModulesTable)(config.ignore)}\\n`);\n\n            if (moduleName && !(0, _packageUtils.getModuleVersion)(moduleName, (0, _packageUtils.loadPackageJson)().content)) {\n              console.log((0, _cliStyles.attention)(`Couldn't find module ${(0, _cliStyles.strong)(moduleName)} in ${(0, _cliStyles.strong)('package.json')}. Choose existing module.\\n`));\n              moduleName = null;\n            }\n\n            ignoreMore = void 0;\n\n          case 6:\n            if (moduleName) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return (0, _askUser2.default)({\n              type: 'list',\n              message: 'Select module to ignore:',\n              choices: makeModulesToIgnoreList(config.ignore),\n              pageSize: 20\n            });\n\n          case 9:\n            moduleName = _context.sent;\n\n          case 10:\n            _context.next = 12;\n            return (0, _ignore.askIgnoreFields)('*');\n\n          case 12:\n            config.ignore[moduleName] = _context.sent;\n\n            config.save();\n\n            console.log((0, _cliStyles.success)(`\\nModule ${(0, _cliStyles.strong)(moduleName)} added to ignored list.\\n`));\n            moduleName = null;\n\n            _context.next = 18;\n            return (0, _askUser2.default)({\n              message: 'Do you want to ignore some other module?',\n              type: 'confirm'\n            });\n\n          case 18:\n            ignoreMore = _context.sent;\n\n          case 19:\n            if (ignoreMore) {\n              _context.next = 6;\n              break;\n            }\n\n          case 20:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nfunction makeModulesToIgnoreList(ignoredModulesConfig) {\n  var _loadPackageJson = (0, _packageUtils.loadPackageJson)(),\n      packageJson = _loadPackageJson.content;\n\n  var ignoredModules = _lodash2.default.keys(ignoredModulesConfig);\n\n  return _lodash2.default.transform(_packageUtils.DEPS_GROUPS, function (list, group) {\n    var groupModules = _lodash2.default.keys(packageJson[group.field]);\n    var availableToIgnore = _lodash2.default.difference(groupModules, ignoredModules);\n\n    if (availableToIgnore.length) {\n      list.push.apply(list, [new _inquirer.Separator((0, _cliStyles.strong)(`--- ${group.field} ---`))].concat(availableToIgnore));\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/commands/ignore/list.js":"'use strict';\n\nexports.__esModule = true;\nexports.handler = exports.describe = exports.command = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _catchAsyncError = require('../../catchAsyncError');\n\nvar _catchAsyncError2 = _interopRequireDefault(_catchAsyncError);\n\nvar _ignore = require('../ignore');\n\nvar _Config = require('../../Config');\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar command = exports.command = 'list';\nvar describe = exports.describe = 'Show the list of ignored modules';\n\nvar handler = exports.handler = (0, _catchAsyncError2.default)((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n  var config;\n  return _regenerator2.default.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = new _Config2.default();\n\n          console.log(`Currently ignored modules:\\n\\n${(0, _ignore.createIgnoredModulesTable)(config.ignore)}\\n`);\n\n        case 2:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, _callee, undefined);\n})));","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/lib/commands/ignore/reset.js":"'use strict';\n\nexports.__esModule = true;\nexports.handler = exports.describe = exports.command = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _catchAsyncError = require('../../catchAsyncError');\n\nvar _catchAsyncError2 = _interopRequireDefault(_catchAsyncError);\n\nvar _askUser = require('../../askUser');\n\nvar _askUser2 = _interopRequireDefault(_askUser);\n\nvar _cliStyles = require('../../cliStyles');\n\nvar _ignore = require('../ignore');\n\nvar _Config = require('../../Config');\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar command = exports.command = 'reset [modules...]';\nvar describe = exports.describe = 'Reset ignored modules';\n\nvar handler = exports.handler = (0, _catchAsyncError2.default)(function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(opts) {\n    var modulesToReset, invalidModules, config, ignoredModules, _$partition, confirm;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            modulesToReset = opts.modules;\n            invalidModules = [];\n            config = new _Config2.default();\n            ignoredModules = _lodash2.default.keys(config.ignore);\n\n\n            console.log(`Currently ignored modules:\\n\\n${(0, _ignore.createIgnoredModulesTable)(config.ignore)}\\n`);\n\n            if (modulesToReset.length) {\n              _$partition = _lodash2.default.partition(modulesToReset, function (moduleName) {\n                return _lodash2.default.includes(ignoredModules, moduleName);\n              });\n              modulesToReset = _$partition[0];\n              invalidModules = _$partition[1];\n\n\n              if (invalidModules.length) {\n                console.log((0, _cliStyles.attention)(`These modules are not in the ignored list: ${(0, _cliStyles.strong)(invalidModules.join(', '))}\\n`));\n              }\n            }\n\n            if (!(!modulesToReset.length || invalidModules.length)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 9;\n            return (0, _askUser2.default)({\n              type: 'checkbox',\n              message: 'Select ignored modules to reset:',\n              choices: ignoredModules,\n              default: modulesToReset\n            });\n\n          case 9:\n            modulesToReset = _context.sent;\n\n            console.log();\n\n          case 11:\n            if (modulesToReset.length) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt('return', console.log((0, _cliStyles.attention)('Nothing to reset')));\n\n          case 13:\n\n            console.log(`These ignored modules will be reset:\\n\\n${(0, _ignore.createIgnoredModulesTable)(config.ignore, modulesToReset)}\\n`);\n\n            _context.next = 16;\n            return (0, _askUser2.default)({\n              message: 'Are you sure?',\n              type: 'confirm',\n              default: false\n            });\n\n          case 16:\n            confirm = _context.sent;\n\n            if (confirm) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt('return');\n\n          case 19:\n\n            config.ignore = _lodash2.default.omit(config.ignore, modulesToReset);\n            config.save();\n\n            console.log((0, _cliStyles.success)('\\nDone!'));\n\n          case 22:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());","/home/travis/build/npmtest/node-npmtest-npm-upgrade/node_modules/npm-upgrade/src/commands/ignore/add.js":"import _ from 'lodash';\nimport { Separator } from 'inquirer';\n\nimport catchAsyncError from '../../catchAsyncError';\nimport askUser from '../../askUser';\nimport { strong, success, attention } from '../../cliStyles';\nimport { createIgnoredModulesTable, askIgnoreFields } from '../ignore';\nimport Config from '../../Config';\nimport { DEPS_GROUPS, loadPackageJson, getModuleVersion } from '../../packageUtils';\n\nexport const command = 'add [module]';\nexport const describe = 'Add module to ignored list';\n\nexport const handler = catchAsyncError(async (opts) => {\n  let { module: moduleName } = opts;\n  const config = new Config();\n  config.ignore = config.ignore || {};\n\n  console.log(\n    `Currently ignored modules:\\n\\n${createIgnoredModulesTable(config.ignore)}\\n`\n  );\n\n  if (moduleName && !getModuleVersion(moduleName, loadPackageJson().content)) {\n    console.log(attention(\n      `Couldn't find module ${strong(moduleName)} in ${strong('package.json')}. Choose existing module.\\n`\n    ));\n    moduleName = null;\n  }\n\n  let ignoreMore;\n  do {\n    if (!moduleName) {\n      moduleName = await askUser({\n        type: 'list',\n        message: 'Select module to ignore:',\n        choices: makeModulesToIgnoreList(config.ignore),\n        pageSize: 20\n      });\n    }\n\n    config.ignore[moduleName] = await askIgnoreFields('*');\n    config.save();\n\n    console.log(\n      success(`\\nModule ${strong(moduleName)} added to ignored list.\\n`)\n    );\n    moduleName = null;\n\n    ignoreMore = await askUser({\n      message: 'Do you want to ignore some other module?',\n      type: 'confirm'\n    });\n  } while (ignoreMore);\n});\n\nfunction makeModulesToIgnoreList(ignoredModulesConfig) {\n  const { content: packageJson } = loadPackageJson();\n  const ignoredModules = _.keys(ignoredModulesConfig);\n\n  return _.transform(DEPS_GROUPS, (list, group) => {\n    const groupModules = _.keys(packageJson[group.field]);\n    const availableToIgnore = _.difference(groupModules, ignoredModules);\n\n    if (availableToIgnore.length) {\n      list.push(\n        new Separator(strong(`--- ${group.field} ---`)),\n        ...availableToIgnore\n      );\n    }\n  });\n}\n"}